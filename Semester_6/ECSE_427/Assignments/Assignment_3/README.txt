/*
 * =============================================================================
 *  Name: Kishan Patel
 *  ID: 260376121
 *  Operating Systems Assignment 3
 * =============================================================================
 */
 
 Instructions
============
1.Run the make file: make -f makefile
2.Run the executable generated by the makefile: ./sfs_out

What Works?
===========
I have implemented all of the methods that were specified in the the assignment 
specifications. Furthermore, I'm getting the same output as the expected test 
output so everything works.

Implementation Details
======================
I created three structures which I store in the FS. The first one represents the 
entries of the directory table. Each file will have an entry in the directory table. 
The second one represents the entries of the file access table. The third structure
holds the blocks that are free. Reading from the FS is fairly straightforward. I
simply use the read_blocks() methods provided. When the fresh variable is set to
true, I reinitialise everything (i.e. set the file names to "",
file size to 0, set all the write and read indexes to 0 and so on). The most
challenging part of this assignment was implementing the read and write functions.
The approach I take while writing is fairly straight forward. First I attempt
to find the current block to start writing to (it's not at offset 0 as sfs_write() 
can be called multipletimes before closing). Once I find this block, I read 
the data in the block to prevent it from getting overwritten. Next, I write the 
data up until the size of the block with a given offset. If there are still 
more bytes to be written and there are still more free blocks remaining, 
I create a new entry in the file access table and start writing to this block. 
In the end, I return the number of bytes that I have written. The read function 
is implemented in a similar manner. I first find the block that I have to 
start reading from. Once I'm at this block, I start reading until the number of 
bytes that I have read is less than the length. In all cases I check to see if 
the file is opened by looking at the file descriptor table.

Final Output 
============
Five files created with zero length:
YZLMNJDA.OVB
TDRKCSTW.AOT
VCHHLTNM.TAA
JDIZZLJS.QBE
VYRVMKHJ.POR

YZLMNJDA.OVB
TDRKCSTW.AOT
VCHHLTNM.TAA
JDIZZLJS.QBE
VYRVMKHJ.POR
Reopened the files again.. the read/write pointers should be set to front
Test program exiting with 0 errors